import { NonEmptyArray, DomainDesignAgg, DomainDesignAggProvider, DomainDesignCommand, DomainDesignCommandProvider, DomainDesignNoteProvider, DomainDesignEvent, DomainDesignEventProvider, DomainDesignFacadeCommand, DomainDesignFacadeCommandProvider, DomainDesignInfoProvider, DomainDesignActor, DomainDesignActorProvider, DomainDesignPolicy, DomainDesignPolicyProvider, DomainDesignService, DomainDesignServiceProvider, DomainDesignSystem, DomainDesignSystemProvider, DomainDesignReadModel, DomainDesignReadModelProvider, CustomInfoArrayToInfoObject, DomainDesignInfo, DomainDesignInfoType, CustomInfo, DomainDesignOptions, DomainObjectSet, DomainDesignObject } from './define';
export type LinkType = 'Association' | 'Dependency' | 'Aggregation' | 'Composition';
type Rule = 'Info' | 'Actor' | 'Command' | 'FacadeCommand' | 'Agg' | 'Event' | 'Policy' | 'Service' | 'System' | 'ReadModel';
export declare function genId(): string;
type ContextInitializer = () => {
    id: string;
    options: DomainDesignOptions;
    createNote: DomainDesignNoteProvider;
    createInfo: DomainDesignInfoProvider;
    createActor: DomainDesignActorProvider;
    createCommand: DomainDesignCommandProvider;
    createFacadeCommand: DomainDesignFacadeCommandProvider;
    createAgg: DomainDesignAggProvider;
    createEvent: DomainDesignEventProvider;
    createPolicy: DomainDesignPolicyProvider;
    createService: DomainDesignServiceProvider;
    createSystem: DomainDesignSystemProvider;
    createReadModel: DomainDesignReadModelProvider;
};
export declare function defaultOptions(): Required<DomainDesignOptions>;
export type DomainDesignInternalContext = ReturnType<typeof createInternalContext>;
declare function createInternalContext(initFn: ContextInitializer): {
    startWorkflow(name: string): string;
    defineUserStory(name: string, workflowNames: NonEmptyArray<string>): void;
    linkTo(srcRule: Rule, srcId: string, targetRule: Rule, targetId: string, linkType?: LinkType): void;
    getDesignerId(): string;
    getDesignerOptions(): Required<DomainDesignOptions>;
    getWorkflows(): Record<string, string[]>;
    getUserStories(): Record<string, string[]>;
    getLinks(): Record<string, LinkType>;
    getIdMap(): Record<string, DomainDesignObject>;
    getAssociationMap(): Record<string, DomainObjectSet<DomainDesignObject>>;
    getCommands(): DomainDesignCommand<any>[];
    getFacadeCommands(): DomainDesignFacadeCommand<any>[];
    getActors(): DomainDesignActor[];
    getEvents(): DomainDesignEvent<any>[];
    getPolicies(): DomainDesignPolicy[];
    getServices(): DomainDesignService[];
    getSystems(): DomainDesignSystem[];
    getAggs(): DomainDesignAgg<any>[];
    getReadModels(): DomainDesignReadModel<any>[];
    registerInfo(info: DomainDesignInfo<any, any>): void;
    registerCommand(command: DomainDesignCommand<any>): void;
    registerFacadeCommand(command: DomainDesignFacadeCommand<any>): void;
    registerActor(actor: DomainDesignActor): void;
    registerEvent(event: DomainDesignEvent<any>): void;
    registerPolicy(policy: DomainDesignPolicy): void;
    registerService(service: DomainDesignService): void;
    registerSystem(system: DomainDesignSystem): void;
    registerAgg(agg: DomainDesignAgg<any>): void;
    registerReadModel(readModel: DomainDesignReadModel<any>): void;
    customInfoArrToInfoObj<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(arr: ARR): CustomInfoArrayToInfoObject<ARR>;
    customInfoArrToInfoArr<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(arr: ARR): DomainDesignInfo<DomainDesignInfoType, string>[];
    toFormat<OBJ extends {
        _attributes: {
            __id: string;
            name: string;
        };
    }>(obj: OBJ): string;
    createNote: DomainDesignNoteProvider;
    info: {
        document<NAME extends string>(name: NAME, note?: string | import("./define").DomainDesignNote): DomainDesignInfo<"Document", NAME>;
        func<NAME extends string>(name: NAME, note?: string | import("./define").DomainDesignNote): DomainDesignInfo<"Function", NAME>;
        func<NAME extends string>(name: NAME, dependsOn: NonEmptyArray<import("./define").DomainDesignInfoFuncDependsOn | string | [string, string | import("./define").DomainDesignNote]>, note?: string | import("./define").DomainDesignNote): DomainDesignInfo<"Function", NAME>;
        id<NAME extends string>(name: NAME, note?: string | import("./define").DomainDesignNote): DomainDesignInfo<"Id", NAME>;
        valueObj<NAME extends string>(name: NAME, note?: string | import("./define").DomainDesignNote): DomainDesignInfo<"ValueObject", NAME>;
        version<NAME extends string>(name: NAME, note?: string | import("./define").DomainDesignNote): DomainDesignInfo<"Version", NAME>;
    };
    createPersion: DomainDesignActorProvider;
    createCommand: DomainDesignCommandProvider;
    createFacadeCommand: DomainDesignFacadeCommandProvider;
    createAgg: DomainDesignAggProvider;
    createEvent: DomainDesignEventProvider;
    createPolicy: DomainDesignPolicyProvider;
    createService: DomainDesignServiceProvider;
    createSystem: DomainDesignSystemProvider;
    createReadModel: DomainDesignReadModelProvider;
};
export declare function useInternalContext(designId: string, initFn?: ContextInitializer): DomainDesignInternalContext;
export {};
