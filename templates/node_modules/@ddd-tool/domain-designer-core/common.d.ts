import { NonEmptyArray, DomainDesignAgg, DomainDesignAggProvider, DomainDesignCommand, DomainDesignCommandProvider, DomainDesignDescProvider, DomainDesignEvent, DomainDesignEventProvider, DomainDesignFacadeCommand, DomainDesignFacadeCommandProvider, DomainDesignInfoProvider, DomainDesignActor, DomainDesignActorProvider, DomainDesignPolicy, DomainDesignPolicyProvider, DomainDesignService, DomainDesignServiceProvider, DomainDesignSystem, DomainDesignSystemProvider, DomainDesignReadModel, DomainDesignReadModelProvider, CustomInfoArrayToInfoObject, DomainDesignInfo, DomainDesignInfoType } from './define';
export type LinkType = 'Association' | 'Dependency' | 'Aggregation' | 'Composition';
type Rule = 'Info' | 'Actor' | 'Command' | 'FacadeCommand' | 'Agg' | 'Event' | 'Policy' | 'Service' | 'System' | 'ReadModel';
export declare function genId(): string;
type ContextInitializer = () => {
    id: string;
    createDesc: DomainDesignDescProvider;
    createInfo: DomainDesignInfoProvider;
    createActor: DomainDesignActorProvider;
    createCommand: DomainDesignCommandProvider;
    createFacadeCommand: DomainDesignFacadeCommandProvider;
    createAgg: DomainDesignAggProvider;
    createEvent: DomainDesignEventProvider;
    createPolicy: DomainDesignPolicyProvider;
    createService: DomainDesignServiceProvider;
    createSystem: DomainDesignSystemProvider;
    createReadModel: DomainDesignReadModelProvider;
};
export type DomainDesignInternalContext = ReturnType<typeof createInternalContext>;
declare function createInternalContext(initFn: ContextInitializer): {
    startWorkflow(name: string): string;
    defineUserStory(name: string, workflowNames: NonEmptyArray<string>): void;
    linkTo(srcRule: Rule, srcCode: string, targetRule: Rule, targetCode: string, linkType?: LinkType): void;
    getId(): string;
    getWorkflows(): Record<string, string[]>;
    getUserStories(): Record<string, string[]>;
    getLinks(): Record<string, LinkType>;
    getIdMap(): Record<string, object>;
    getCommands(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "Command";
            name: string;
            infos: any;
            description?: Readonly<{
                readonly _attributes: {
                    rule: "Desc";
                    readonly template: TemplateStringsArray;
                    readonly values: import("./define").DomainDesignDescValue[];
                };
            }> | undefined;
        };
        inner: any;
        agg<AGG extends DomainDesignAgg<any>>(agg: AGG): AGG;
        agg<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, agg: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignAgg<CustomInfoArrayToInfoObject<ARR>>;
    }>[];
    getFacadeCommands(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "FacadeCommand";
            name: string;
            infos: any;
            description?: Readonly<{
                readonly _attributes: {
                    rule: "Desc";
                    readonly template: TemplateStringsArray;
                    readonly values: import("./define").DomainDesignDescValue[];
                };
            }> | undefined;
        };
        inner: any;
        agg<AGG extends DomainDesignAgg<any>>(agg: AGG): AGG;
        agg<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, agg: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignAgg<CustomInfoArrayToInfoObject<ARR>>;
        service(service: DomainDesignService): DomainDesignService;
        service(name: string, desc?: string | import("./define").DomainDesignDesc): DomainDesignService;
    }>[];
    getActors(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "Actor";
            name: string;
            description?: import("./define").DomainDesignDesc;
        };
        command<COMMAND extends DomainDesignCommand<any>>(command: COMMAND): COMMAND;
        command<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignCommand<CustomInfoArrayToInfoObject<ARR>>;
        facadeCmd<FACADECMD extends DomainDesignFacadeCommand<any>>(command: FACADECMD): FACADECMD;
        facadeCmd<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignFacadeCommand<CustomInfoArrayToInfoObject<ARR>>;
        readModel<READ_MODEL extends DomainDesignReadModel<any>>(readModel: READ_MODEL): READ_MODEL;
        readModel<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR | import("./define").NonEmptyInitFunc<() => ARR>): DomainDesignReadModel<CustomInfoArrayToInfoObject<ARR>>;
    }>[];
    getEvents(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "Event";
            name: string;
            infos: any;
            description?: Readonly<{
                readonly _attributes: {
                    rule: "Desc";
                    readonly template: TemplateStringsArray;
                    readonly values: import("./define").DomainDesignDescValue[];
                };
            }> | undefined;
        };
        inner: any;
        policy(policy: DomainDesignPolicy): DomainDesignPolicy;
        policy(name: string, desc?: string | import("./define").DomainDesignDesc): DomainDesignPolicy;
        system(system: DomainDesignSystem): DomainDesignSystem;
        system(name: string, desc?: string | import("./define").DomainDesignDesc): DomainDesignSystem;
        readModel<READ_MODEL extends DomainDesignReadModel<any>>(readModel: READ_MODEL): READ_MODEL;
        readModel<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR | import("./define").NonEmptyInitFunc<() => ARR>): DomainDesignReadModel<CustomInfoArrayToInfoObject<ARR>>;
    }>[];
    getPolicies(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "Policy";
            name: string;
            description?: import("./define").DomainDesignDesc;
        };
        service(service: DomainDesignService): DomainDesignService;
        service(name: string, desc?: string | import("./define").DomainDesignDesc): DomainDesignService;
    }>[];
    getServices(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "Service";
            name: string;
            description?: import("./define").DomainDesignDesc;
        };
        command<COMMAND extends DomainDesignCommand<any>>(command: COMMAND): COMMAND;
        command<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignCommand<CustomInfoArrayToInfoObject<ARR>>;
        facadeCmd<FACADECMD extends DomainDesignFacadeCommand<any>>(facadeCmd: FACADECMD): FACADECMD;
        facadeCmd<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignFacadeCommand<CustomInfoArrayToInfoObject<ARR>>;
        agg<AGG extends DomainDesignAgg<any>>(agg: AGG): AGG;
        agg<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, agg: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignAgg<CustomInfoArrayToInfoObject<ARR>>;
    }>[];
    getSystems(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "System";
            name: string;
            description?: import("./define").DomainDesignDesc;
        };
        command<COMMAND extends DomainDesignCommand<any>>(command: COMMAND): COMMAND;
        command<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignCommand<CustomInfoArrayToInfoObject<ARR>>;
        facadeCmd<FACADECMD extends DomainDesignFacadeCommand<any>>(facadeCmd: FACADECMD): FACADECMD;
        facadeCmd<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignFacadeCommand<CustomInfoArrayToInfoObject<ARR>>;
    }>[];
    getAggs(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "Agg";
            name: string;
            infos: any;
            description?: Readonly<{
                readonly _attributes: {
                    rule: "Desc";
                    readonly template: TemplateStringsArray;
                    readonly values: import("./define").DomainDesignDescValue[];
                };
            }> | undefined;
        };
        inner: any;
        event<EVENT extends DomainDesignEvent<any>>(event: EVENT): EVENT;
        event<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignEvent<CustomInfoArrayToInfoObject<ARR>>;
    }>[];
    getReadModels(): Readonly<{
        readonly _attributes: {
            __id: string;
            rule: "ReadModel";
            name: string;
            infos: any;
            description?: Readonly<{
                readonly _attributes: {
                    rule: "Desc";
                    readonly template: TemplateStringsArray;
                    readonly values: import("./define").DomainDesignDescValue[];
                };
            }> | undefined;
        };
        inner: any;
    }>[];
    registerInfo(info: DomainDesignInfo<any, any>): void;
    registerCommand(command: DomainDesignCommand<any>): void;
    registerFacadeCommand(command: DomainDesignFacadeCommand<any>): void;
    registerActor(actor: DomainDesignActor): void;
    registerEvent(event: DomainDesignEvent<any>): void;
    registerPolicy(policy: DomainDesignPolicy): void;
    registerService(service: DomainDesignService): void;
    registerSystem(system: DomainDesignSystem): void;
    registerAgg(agg: DomainDesignAgg<any>): void;
    registerReadModel(readModel: DomainDesignReadModel<any>): void;
    customInfoArrToInfoObj<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<any, G_NAME> | G_NAME>>(arr: ARR): CustomInfoArrayToInfoObject<ARR>;
    createDesc: DomainDesignDescProvider;
    info: {
        document<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): DomainDesignInfo<"Document", NAME>;
        func<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): DomainDesignInfo<"Function", NAME>;
        func<NAME extends string>(name: NAME, dependsOn: NonEmptyArray<import("./define").DomainDesignInfoFuncDependsOn | string>, desc?: string | import("./define").DomainDesignDesc): DomainDesignInfo<"Function", NAME>;
        id<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): DomainDesignInfo<"Id", NAME>;
        valueObj<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): DomainDesignInfo<"ValueObject", NAME>;
        valueObj<NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, string> | string>>(name: NAME, infos: ARR, desc?: string | import("./define").DomainDesignDesc): DomainDesignInfo<"ValueObject", NAME>;
        version<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): DomainDesignInfo<"Version", NAME>;
    };
    createPersion: DomainDesignActorProvider;
    createCommand: DomainDesignCommandProvider;
    createFacadeCommand: DomainDesignFacadeCommandProvider;
    createAgg: DomainDesignAggProvider;
    createEvent: DomainDesignEventProvider;
    createPolicy: DomainDesignPolicyProvider;
    createService: DomainDesignServiceProvider;
    createSystem: DomainDesignSystemProvider;
    createReadModel: DomainDesignReadModelProvider;
};
export declare function useInternalContext(designId: string, initFn?: ContextInitializer): DomainDesignInternalContext;
export {};
