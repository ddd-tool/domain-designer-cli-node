export declare function createDomainDesigner(): {
    startWorkflow: (name: string) => string;
    defineUserStory: (name: string, workflowNames: import("./define").NonEmptyArray<string>) => void;
    desc: import("./define").DomainDesignDescProvider;
    info: {
        document<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Document", NAME>;
        func<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Function", NAME>;
        func<NAME extends string>(name: NAME, dependsOn: import("./define").NonEmptyArray<import("./define").DomainDesignInfoFuncDependsOn | string>, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Function", NAME>;
        id<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Id", NAME>;
        valueObj<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"ValueObject", NAME>;
        valueObj<NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, string> | string>>(name: NAME, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"ValueObject", NAME>;
        version<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Version", NAME>;
    };
    actor: import("./define").DomainDesignActorProvider;
    facadeCmd: import("./define").DomainDesignFacadeCommandProvider;
    command: import("./define").DomainDesignCommandProvider;
    agg: import("./define").DomainDesignAggProvider;
    event: import("./define").DomainDesignEventProvider;
    system: import("./define").DomainDesignSystemProvider;
    policy: import("./define").DomainDesignPolicyProvider;
    service: import("./define").DomainDesignServiceProvider;
    readModel: import("./define").DomainDesignReadModelProvider;
    _getContext: () => {
        startWorkflow(name: string): string;
        defineUserStory(name: string, workflowNames: import("./define").NonEmptyArray<string>): void;
        linkTo(srcRule: "Info" | "Actor" | "Command" | "FacadeCommand" | "Event" | "Agg" | "Policy" | "System" | "Service" | "ReadModel", srcCode: string, targetRule: "Info" | "Actor" | "Command" | "FacadeCommand" | "Event" | "Agg" | "Policy" | "System" | "Service" | "ReadModel", targetCode: string, linkType?: import("./common").LinkType): void;
        getId(): string;
        getWorkflows(): Record<string, string[]>;
        getUserStories(): Record<string, string[]>;
        getLinks(): Record<string, import("./common").LinkType>;
        getIdMap(): Record<string, object>;
        getCommands(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "Command";
                name: string;
                infos: any;
                description?: Readonly<{
                    readonly _attributes: {
                        rule: "Desc";
                        readonly template: TemplateStringsArray;
                        readonly values: import("./define").DomainDesignDescValue[];
                    };
                }> | undefined;
            };
            inner: any;
            agg<AGG extends import("./define").DomainDesignAgg<any>>(agg: AGG): AGG;
            agg<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, agg: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignAgg<import("./define").CustomInfoArrayToInfoObject<ARR>>;
        }>[];
        getFacadeCommands(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "FacadeCommand";
                name: string;
                infos: any;
                description?: Readonly<{
                    readonly _attributes: {
                        rule: "Desc";
                        readonly template: TemplateStringsArray;
                        readonly values: import("./define").DomainDesignDescValue[];
                    };
                }> | undefined;
            };
            inner: any;
            agg<AGG extends import("./define").DomainDesignAgg<any>>(agg: AGG): AGG;
            agg<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, agg: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignAgg<import("./define").CustomInfoArrayToInfoObject<ARR>>;
            service(service: import("./define").DomainDesignService): import("./define").DomainDesignService;
            service(name: string, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignService;
        }>[];
        getActors(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "Actor";
                name: string;
                description?: import("./define").DomainDesignDesc;
            };
            command<COMMAND extends import("./define").DomainDesignCommand<any>>(command: COMMAND): COMMAND;
            command<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignCommand<import("./define").CustomInfoArrayToInfoObject<ARR>>;
            facadeCmd<FACADECMD extends import("./define").DomainDesignFacadeCommand<any>>(command: FACADECMD): FACADECMD;
            facadeCmd<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignFacadeCommand<import("./define").CustomInfoArrayToInfoObject<ARR>>;
            readModel<READ_MODEL extends import("./define").DomainDesignReadModel<any>>(readModel: READ_MODEL): READ_MODEL;
            readModel<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR | import("./define").NonEmptyInitFunc<() => ARR>): import("./define").DomainDesignReadModel<import("./define").CustomInfoArrayToInfoObject<ARR>>;
        }>[];
        getEvents(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "Event";
                name: string;
                infos: any;
                description?: Readonly<{
                    readonly _attributes: {
                        rule: "Desc";
                        readonly template: TemplateStringsArray;
                        readonly values: import("./define").DomainDesignDescValue[];
                    };
                }> | undefined;
            };
            inner: any;
            policy(policy: import("./define").DomainDesignPolicy): import("./define").DomainDesignPolicy;
            policy(name: string, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignPolicy;
            system(system: import("./define").DomainDesignSystem): import("./define").DomainDesignSystem;
            system(name: string, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignSystem;
            readModel<READ_MODEL extends import("./define").DomainDesignReadModel<any>>(readModel: READ_MODEL): READ_MODEL;
            readModel<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR | import("./define").NonEmptyInitFunc<() => ARR>): import("./define").DomainDesignReadModel<import("./define").CustomInfoArrayToInfoObject<ARR>>;
        }>[];
        getPolicies(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "Policy";
                name: string;
                description?: import("./define").DomainDesignDesc;
            };
            service(service: import("./define").DomainDesignService): import("./define").DomainDesignService;
            service(name: string, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignService;
        }>[];
        getServices(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "Service";
                name: string;
                description?: import("./define").DomainDesignDesc;
            };
            command<COMMAND extends import("./define").DomainDesignCommand<any>>(command: COMMAND): COMMAND;
            command<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignCommand<import("./define").CustomInfoArrayToInfoObject<ARR>>;
            facadeCmd<FACADECMD extends import("./define").DomainDesignFacadeCommand<any>>(facadeCmd: FACADECMD): FACADECMD;
            facadeCmd<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignFacadeCommand<import("./define").CustomInfoArrayToInfoObject<ARR>>;
            agg<AGG extends import("./define").DomainDesignAgg<any>>(agg: AGG): AGG;
            agg<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, agg: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignAgg<import("./define").CustomInfoArrayToInfoObject<ARR>>;
        }>[];
        getSystems(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "System";
                name: string;
                description?: import("./define").DomainDesignDesc;
            };
            command<COMMAND extends import("./define").DomainDesignCommand<any>>(command: COMMAND): COMMAND;
            command<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignCommand<import("./define").CustomInfoArrayToInfoObject<ARR>>;
            facadeCmd<FACADECMD extends import("./define").DomainDesignFacadeCommand<any>>(facadeCmd: FACADECMD): FACADECMD;
            facadeCmd<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignFacadeCommand<import("./define").CustomInfoArrayToInfoObject<ARR>>;
        }>[];
        getAggs(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "Agg";
                name: string;
                infos: any;
                description?: Readonly<{
                    readonly _attributes: {
                        rule: "Desc";
                        readonly template: TemplateStringsArray;
                        readonly values: import("./define").DomainDesignDescValue[];
                    };
                }> | undefined;
            };
            inner: any;
            event<EVENT extends import("./define").DomainDesignEvent<any>>(event: EVENT): EVENT;
            event<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignEvent<import("./define").CustomInfoArrayToInfoObject<ARR>>;
        }>[];
        getReadModels(): Readonly<{
            readonly _attributes: {
                __id: string;
                rule: "ReadModel";
                name: string;
                infos: any;
                description?: Readonly<{
                    readonly _attributes: {
                        rule: "Desc";
                        readonly template: TemplateStringsArray;
                        readonly values: import("./define").DomainDesignDescValue[];
                    };
                }> | undefined;
            };
            inner: any;
        }>[];
        registerInfo(info: import("./define").DomainDesignInfo<any, any>): void;
        registerCommand(command: import("./define").DomainDesignCommand<any>): void;
        registerFacadeCommand(command: import("./define").DomainDesignFacadeCommand<any>): void;
        registerActor(actor: import("./define").DomainDesignActor): void;
        registerEvent(event: import("./define").DomainDesignEvent<any>): void;
        registerPolicy(policy: import("./define").DomainDesignPolicy): void;
        registerService(service: import("./define").DomainDesignService): void;
        registerSystem(system: import("./define").DomainDesignSystem): void;
        registerAgg(agg: import("./define").DomainDesignAgg<any>): void;
        registerReadModel(readModel: import("./define").DomainDesignReadModel<any>): void;
        customInfoArrToInfoObj<G_NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<any, G_NAME> | G_NAME>>(arr: ARR): import("./define").CustomInfoArrayToInfoObject<ARR>;
        createDesc: import("./define").DomainDesignDescProvider;
        info: {
            document<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Document", NAME>;
            func<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Function", NAME>;
            func<NAME extends string>(name: NAME, dependsOn: import("./define").NonEmptyArray<import("./define").DomainDesignInfoFuncDependsOn | string>, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Function", NAME>;
            id<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Id", NAME>;
            valueObj<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"ValueObject", NAME>;
            valueObj<NAME extends string, ARR extends import("./define").NonEmptyArray<import("./define").DomainDesignInfo<import("./define").DomainDesignInfoType, string> | string>>(name: NAME, infos: ARR, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"ValueObject", NAME>;
            version<NAME extends string>(name: NAME, desc?: string | import("./define").DomainDesignDesc): import("./define").DomainDesignInfo<"Version", NAME>;
        };
        createPersion: import("./define").DomainDesignActorProvider;
        createCommand: import("./define").DomainDesignCommandProvider;
        createFacadeCommand: import("./define").DomainDesignFacadeCommandProvider;
        createAgg: import("./define").DomainDesignAggProvider;
        createEvent: import("./define").DomainDesignEventProvider;
        createPolicy: import("./define").DomainDesignPolicyProvider;
        createService: import("./define").DomainDesignServiceProvider;
        createSystem: import("./define").DomainDesignSystemProvider;
        createReadModel: import("./define").DomainDesignReadModelProvider;
    };
};
export type DomainDesigner = ReturnType<typeof createDomainDesigner>;
export type { DomainDesignAgg, DomainDesignCommand, DomainDesignFacadeCommand, DomainDesignDesc, DomainDesignEvent, DomainDesignInfo, DomainDesignInfoType, DomainDesignActor, DomainDesignSystem, DomainDesignService, DomainDesignPolicy, } from './define';
export { isDomainDesignInfo, isDomainDesignInfoFunc, isDomainDesignActor, isDomainDesignAgg, isDomainDesignCommand, isDomainDesignFacadeCommand, isDomainDesignEvent, isDomainDesignPolicy, isDomainDesignReadModel, isDomainDesignService, isDomainDesignSystem, } from './define';
