export type DomainDesignDescProvider = {
    (temp: undefined): undefined;
    (temp: string): DomainDesignDesc;
    (temp: DomainDesignDesc): DomainDesignDesc;
    (temp: TemplateStringsArray, ...values: DomainDesignDescValue[]): DomainDesignDesc;
};
export type DomainDesignDesc = Readonly<{
    readonly _attributes: {
        rule: 'Desc';
        readonly template: TemplateStringsArray;
        readonly values: DomainDesignDescValue[];
    };
}>;
export type DomainDesignDescValue = DomainDesignInfo<any, any> | DomainDesignCommand<any> | DomainDesignFacadeCommand<any> | DomainDesignEvent<any> | DomainDesignAgg<any> | DomainDesignActor | DomainDesignSystem | DomainDesignPolicy | DomainDesignService;
export type DomainDesignInfoProvider = () => {
    document<NAME extends string>(name: NAME, desc?: string | DomainDesignDesc): DomainDesignInfo<'Document', NAME>;
    func<NAME extends string>(name: NAME, desc?: string | DomainDesignDesc): DomainDesignInfo<'Function', NAME>;
    func<NAME extends string>(name: NAME, dependsOn: NonEmptyArray<DomainDesignInfoFuncDependsOn | string | [string, string | DomainDesignDesc]>, desc?: string | DomainDesignDesc): DomainDesignInfo<'Function', NAME>;
    id<NAME extends string>(name: NAME, desc?: string | DomainDesignDesc): DomainDesignInfo<'Id', NAME>;
    valueObj<NAME extends string>(name: NAME, desc?: string | DomainDesignDesc): DomainDesignInfo<'ValueObject', NAME>;
    version<NAME extends string>(name: NAME, desc?: string | DomainDesignDesc): DomainDesignInfo<'Version', NAME>;
};
export type DomainDesignInfoType = 'Document' | 'Function' | 'Id' | 'ValueObject' | 'Version';
export type DomainDesignInfoSimplify<NAME extends string> = NAME | [NAME, string | DomainDesignDesc];
export type DomainDesignInfoSubtype<TYPE extends DomainDesignInfoType> = TYPE extends 'Document' | 'Id' | 'Version' | 'ValueObject' ? 'None' : TYPE extends 'Function' ? DomainDesignInfoFuncDependsOn[] : never;
export type DomainDesignInfo<TYPE extends DomainDesignInfoType, NAME extends string> = Readonly<{
    _attributes: {
        __id: string;
        rule: 'Info';
        type: TYPE;
        subtype: DomainDesignInfoSubtype<TYPE>;
        name: NAME;
        description?: DomainDesignDesc;
    };
    toFormat(): string;
}>;
export type DomainDesignInfoFuncDependsOn = DomainDesignInfo<Exclude<DomainDesignInfoType, 'Function'>, string>;
export type DomainDesignInfoObject = NonEmptyObject<Record<string, DomainDesignInfo<DomainDesignInfoType, string>>>;
export type CustomInfo<G_NAME extends string> = DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME | [G_NAME, string | DomainDesignDesc];
export type CustomInfoArrayToInfoObject<ARR extends Array<DomainDesignInfo<any, any> | string | [string, string | DomainDesignDesc]>> = {
    [K in ARR[number] as K extends DomainDesignInfo<any, infer U> ? U : K extends string ? K : K extends [infer U, any] ? U : never]: K extends DomainDesignInfo<any, any> ? K : K extends string ? DomainDesignInfo<'ValueObject', K> : K extends [infer U extends string, any] ? DomainDesignInfo<'ValueObject', U> : never;
};
export type DomainDesignActorProvider = {
    (name: string, desc?: string | DomainDesignDesc): DomainDesignActor;
};
export type DomainDesignActor = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'Actor';
        name: string;
        description?: DomainDesignDesc;
    };
    command<COMMAND extends DomainDesignCommand<any>>(command: COMMAND): COMMAND;
    command<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | DomainDesignDesc): DomainDesignCommand<CustomInfoArrayToInfoObject<ARR>>;
    facadeCmd<FACADECMD extends DomainDesignFacadeCommand<any>>(command: FACADECMD): FACADECMD;
    facadeCmd<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR, desc?: string | DomainDesignDesc): DomainDesignFacadeCommand<CustomInfoArrayToInfoObject<ARR>>;
    readModel<READ_MODEL extends DomainDesignReadModel<any>>(readModel: READ_MODEL): READ_MODEL;
    readModel<G_NAME extends string, ARR extends NonEmptyArray<DomainDesignInfo<DomainDesignInfoType, G_NAME> | G_NAME>>(name: string, infos: ARR | NonEmptyInitFunc<() => ARR>): DomainDesignReadModel<CustomInfoArrayToInfoObject<ARR>>;
    toFormat(): string;
}>;
export type DomainDesignCommandProvider = {
    <G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR | NonEmptyInitFunc<() => ARR>, desc?: string | DomainDesignDesc): DomainDesignCommand<CustomInfoArrayToInfoObject<ARR>>;
};
export type DomainDesignCommand<INFOS extends DomainDesignInfoObject> = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'Command';
        name: string;
        infos: INFOS;
        description?: DomainDesignDesc;
    };
    inner: INFOS;
    agg<AGG extends DomainDesignAgg<any>>(agg: AGG): AGG;
    agg<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, agg: ARR, desc?: string | DomainDesignDesc): DomainDesignAgg<CustomInfoArrayToInfoObject<ARR>>;
    toFormat(): string;
}>;
export type DomainDesignFacadeCommandProvider = {
    <G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR | NonEmptyInitFunc<() => ARR>, desc?: string | DomainDesignDesc): DomainDesignFacadeCommand<CustomInfoArrayToInfoObject<ARR>>;
};
export type DomainDesignFacadeCommand<INFOS extends DomainDesignInfoObject> = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'FacadeCommand';
        name: string;
        infos: INFOS;
        description?: DomainDesignDesc;
    };
    inner: INFOS;
    agg<AGG extends DomainDesignAgg<any>>(agg: AGG): AGG;
    agg<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, agg: ARR, desc?: string | DomainDesignDesc): DomainDesignAgg<CustomInfoArrayToInfoObject<ARR>>;
    service(service: DomainDesignService): DomainDesignService;
    service(name: string, desc?: string | DomainDesignDesc): DomainDesignService;
    toFormat(): string;
}>;
export type DomainDesignEventProvider = {
    <G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR | NonEmptyInitFunc<() => ARR>, desc?: string | DomainDesignDesc): DomainDesignEvent<CustomInfoArrayToInfoObject<ARR>>;
};
export type DomainDesignEvent<INFOS extends DomainDesignInfoObject> = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'Event';
        name: string;
        infos: INFOS;
        description?: DomainDesignDesc;
    };
    inner: INFOS;
    policy(policy: DomainDesignPolicy): DomainDesignPolicy;
    policy(name: string, desc?: string | DomainDesignDesc): DomainDesignPolicy;
    system(system: DomainDesignSystem): DomainDesignSystem;
    system(name: string, desc?: string | DomainDesignDesc): DomainDesignSystem;
    readModel<READ_MODEL extends DomainDesignReadModel<any>>(readModel: READ_MODEL): READ_MODEL;
    readModel<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR | NonEmptyInitFunc<() => ARR>): DomainDesignReadModel<CustomInfoArrayToInfoObject<ARR>>;
    toFormat(): string;
}>;
export type DomainDesignAggProvider = {
    <G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR | NonEmptyInitFunc<() => ARR>, desc?: string | DomainDesignDesc): DomainDesignAgg<CustomInfoArrayToInfoObject<ARR>>;
};
export type DomainDesignAgg<INFOS extends DomainDesignInfoObject> = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'Agg';
        name: string;
        infos: INFOS;
        description?: DomainDesignDesc;
    };
    inner: INFOS;
    event<EVENT extends DomainDesignEvent<any>>(event: EVENT): EVENT;
    event<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR, desc?: string | DomainDesignDesc): DomainDesignEvent<CustomInfoArrayToInfoObject<ARR>>;
    toFormat(): string;
}>;
export type DomainDesignPolicyProvider = {
    (name: string, desc?: string | DomainDesignDesc): DomainDesignPolicy;
};
export type DomainDesignPolicy = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'Policy';
        name: string;
        description?: DomainDesignDesc;
    };
    service(service: DomainDesignService): DomainDesignService;
    service(name: string, desc?: string | DomainDesignDesc): DomainDesignService;
    toFormat(): string;
}>;
export type DomainDesignSystemProvider = {
    (name: string, desc?: string | DomainDesignDesc): DomainDesignSystem;
};
export type DomainDesignSystem = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'System';
        name: string;
        description?: DomainDesignDesc;
    };
    command<COMMAND extends DomainDesignCommand<any>>(command: COMMAND): COMMAND;
    command<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR, desc?: string | DomainDesignDesc): DomainDesignCommand<CustomInfoArrayToInfoObject<ARR>>;
    facadeCmd<FACADECMD extends DomainDesignFacadeCommand<any>>(facadeCmd: FACADECMD): FACADECMD;
    facadeCmd<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR, desc?: string | DomainDesignDesc): DomainDesignFacadeCommand<CustomInfoArrayToInfoObject<ARR>>;
    toFormat(): string;
}>;
export type DomainDesignServiceProvider = (name: string, desc?: string | DomainDesignDesc) => DomainDesignService;
export type DomainDesignService = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'Service';
        name: string;
        description?: DomainDesignDesc;
    };
    command<COMMAND extends DomainDesignCommand<any>>(command: COMMAND): COMMAND;
    command<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR, desc?: string | DomainDesignDesc): DomainDesignCommand<CustomInfoArrayToInfoObject<ARR>>;
    facadeCmd<FACADECMD extends DomainDesignFacadeCommand<any>>(facadeCmd: FACADECMD): FACADECMD;
    facadeCmd<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR, desc?: string | DomainDesignDesc): DomainDesignFacadeCommand<CustomInfoArrayToInfoObject<ARR>>;
    agg<AGG extends DomainDesignAgg<any>>(agg: AGG): AGG;
    agg<G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, agg: ARR, desc?: string | DomainDesignDesc): DomainDesignAgg<CustomInfoArrayToInfoObject<ARR>>;
    toFormat(): string;
}>;
export type DomainDesignReadModelProvider = {
    <G_NAME extends string, ARR extends NonEmptyArray<CustomInfo<G_NAME>>>(name: string, infos: ARR | NonEmptyInitFunc<() => ARR>, desc?: string | DomainDesignDesc): DomainDesignReadModel<CustomInfoArrayToInfoObject<ARR>>;
};
export type DomainDesignReadModel<INFOS extends DomainDesignInfoObject> = Readonly<{
    readonly _attributes: {
        __id: string;
        rule: 'ReadModel';
        name: string;
        infos: INFOS;
        description?: DomainDesignDesc;
    };
    inner: INFOS;
    toFormat(): string;
}>;
export type DomainDesignOptions = {
    toFormatType?: 'BngleBrackets' | 'JSON' | 'JSONPretty';
};
export type NonEmptyArray<T> = [T, ...T[]];
export type NonEmptyObject<T extends object> = keyof T extends never ? never : T;
export type NonEmptyInitFunc<T extends () => object> = keyof ReturnType<T> extends never ? never : T;
export declare function isDomainDesignInfo(param: any): param is DomainDesignInfo<any, any>;
export declare function isDomainDesignInfoFunc<NAME extends string>(info: DomainDesignInfo<DomainDesignInfoType, NAME>): info is DomainDesignInfo<'Function', NAME>;
export declare function isDomainDesignActor(param: any): param is DomainDesignActor;
export declare function isDomainDesignAgg(param: any): param is DomainDesignAgg<any>;
export declare function isDomainDesignCommand(param: any): param is DomainDesignCommand<any>;
export declare function isDomainDesignFacadeCommand(param: any): param is DomainDesignFacadeCommand<any>;
export declare function isDomainDesignEvent(param: any): param is DomainDesignEvent<any>;
export declare function isDomainDesignPolicy(param: any): param is DomainDesignPolicy;
export declare function isDomainDesignReadModel(param: any): param is DomainDesignReadModel<any>;
export declare function isDomainDesignService(param: any): param is DomainDesignService;
export declare function isDomainDesignSystem(param: any): param is DomainDesignSystem;
